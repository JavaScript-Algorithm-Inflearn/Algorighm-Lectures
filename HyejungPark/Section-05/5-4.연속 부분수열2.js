/*
[문제]
N개의 수로 이루어진 수열이 주어집니다.
이 수열에서 연속부분수열의 합이 특정숫자 M이하가 되는 경우가 몇 번 있는지 구하는 프로그램을 작성하세요.
만약 N=5, M=5이고 수열이 다음과 같다면
1 3 1 2 3
합이 5이하가 되는 연속부분수열은 {1}, {3}, {1}, {2}, {3}, {1, 3}, {3, 1}, {1, 2}, {2, 3},
{1, 3, 1}로 총 10가지입니다.

▣ 입력설명
첫째 줄에 N(1≤N≤100,000), M(1≤M≤100,000,000)이 주어진다.
수열의 원소값은 1,000을 넘지 않는 자연수이다.

▣ 출력설명
첫째 줄에 경우의 수를 출력한다.

*/

const M = 5;
const arr = [1, 3, 1, 2, 3];

function solution1(M, arr) {
  const N = arr.length;
  let lt = 0;
  let count = 0;
  let sum = 0;

  for (let rt = 0; rt < N; rt++) {
    // 현재까지 부분집합의 합계를 구하기 위해 sum에 rt 값을 더한다.
    sum += arr[rt];
    // 만약 sum이 M을 초과한다면, lt만큼 빼주고 lt를 앞으로 이동시킨다.
    while (sum > M) sum -= arr[lt++];
    // 이 과정이 끝나고 sum이 M 이하인 경우, 현재 lt부터 rt 값 까지의 부분집합 갯수를 구해 더해준다.
    count += rt - lt + 1;
  }
  return count;
}

const resultl = solution1(M, arr);
console.log(resultl);

/*
[풀이과정]

arr = [1,3,1,2,3] 일 때 코드의 풀이 과정.

1. sum = 0, count = 0, lt = 0, rt = 0
- sum에 arr[0]인 1이 더해진다.
- 1 은 M(5)보다 작으므로, count에는 0 - 0 + 1 => 1이 더해진다.(부분집합은 [1])

2. sum = 1, count = 1, lt = 0, rt = 1
- sum에 arr[1] 인 3이 더해진다. 
- 4는 5보다 작으므로, count에는 1 - 0 + 1 => 2가 더해진다. (부분집합은 [1, 3], [3] => 2개)

3. sum = 4, count = 3, lt = 0, rt = 2
- sum 에 arr[2]인 1이 더해진다.
- 5는 5와 같으므로 count에는 2 - 0 + 1 => 3이 더해진다. (부분집합은 [1, 3, 1], [3, 1], [1] => 3개)

4. sum = 5, count = 6, lt = 0, rt = 3
-sum += arr[3] => 7
- 7은 5보다 크므로, while문으로 진입해 lt를 증가시키며 sum에서 빼준다.
- 최종적으로 lt = 2, sum = 3, rt = 3
- 3 - 2 + 1 은 2 이다. (부분집합은 [1, 2], [2] => 2개)

5. sum = 3, count = 8, lt = 2, rt = 4
- sum += arr[4] = 6
- while문으로 진입하여 lt = 3, sum = 5
- 4 - 3 + 1 = 2 부분집합은 [2,3], [3] => 2개이다.

최종적으로 카운트는 1 + 2 + 3 + 2 + 2 => 10개이다. 


*/

/*
[문제] 계단 오르기 DP

철수는 계단을 오를 때 한 번에 한 계단 또는 두 계단씩 올라간다. 만약 총 4계단을 오른다면 그 방법의 수는

1+1+1+1, 1+1+2, 1+2+1, 2+1+1, 2+2 로 5가지 이다.

그렇다면 총 n개의 계단일 때 철수가 올라갈 수 있는 방법의 수는 몇가지인가?
*/

/*
계단이 6개라면...

1,1,1,1,1,1
2,1,1,1,1
1,2,1,1,1
1,1,2,1,1
1,1,1,2,1
1,1,1,1,2
1,1,2,2
1,2,1,2
1,2,2,1
2,2,1,1
2,1,2,1
2,1,1,2
2,2,2
=> 13개..?

동적 프로그래밍이란 큰 문제를 작은 문제로 쪼개고, 이전에 계산된 결과를 활용해 점점 넓은 범위의 문제를 풀어나가는 것!

1,2,3,4 번의 계단이 있을 때
1번 계단까지 가는 방법의 갯수
2번 계단까지 가는 방법의 갯수... 이렇게 세어서 . 

각 계단을 올라가는 방법의 횟수는 2칸 전에서 올라오거나, 1칸 전에서 올라오거나임!
각 칸까지 올라가는 방법을 해당 배열의 같은 인덱스로 기억하고 있기 때문에 그 값을 더해주면 최종적인 값을 도출할 수 있다..!
*/

const n = 7;

function solution(n) {
  let memo = new Array(n + 1).fill(0);

  for (let i = 1; i <= n; i++) {
    if (!memo[i - 2]) {
      memo[i] = i;
    } else {
      memo[i] = memo[i - 1] + memo[i - 2];
    }
  }
  return memo[n];
}

const result = solution(n);
console.log(result);

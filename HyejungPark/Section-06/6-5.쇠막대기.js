/*
[문제] 6-5. 쇠막대기 [Stack]
여러 개의 쇠막대기를 레이저로 절단하려고 한다. 효율적인 작업을 위해서 쇠막대기를 아래에서 위로 겹쳐 놓고, 레이저를 위에서 수직으로 발사하여 쇠막대기들을 자른다. 쇠막대기와 레이저의 배치는 다음 조건을 만족한다.

• 쇠막대기는 자신보다 긴 쇠막대기 위에만 놓일 수 있다. - 쇠막대기를 다른 쇠막대기 위에놓는 경우 완전히 포함되도록 놓되, 끝점은 겹치지 않도록 놓는다.
• 각 쇠막대기를 자르는 레이저는 적어도 하나 존재한다.
• 레이저는 어떤 쇠막대기의 양 끝점과도 겹치지 않는다.
이러한 레이저와 쇠막대기의 배치는 다음과 같이 괄호를 이용하여 왼쪽부터 순서대로 표현할 수 있다.
1. 레이저는 여는 괄호와 닫는 괄호의 인접한 쌍 ‘( ) ’ 으로 표현된다. 또한, 모든 ‘( ) ’는 반드시 레이저를 표현한다.
2. 쇠막대기의 왼쪽 끝은 여는 괄호 ‘ ( ’ 로, 오른쪽 끝은 닫힌 괄호 ‘) ’ 로 표현된다.

쇠막대기는 레이저에 의해 몇 개의 조각으로 잘려지는데, 위 예에서 가장 위에 있는 두 개의 쇠막대기는 각각 3개와 2개의 조각으로 잘려지고, 이와 같은 방식으로 주어진 쇠막대기들은 총 17개의 조각으로 잘려진다.
쇠막대기와 레이저의 배치를 나타내는 괄호 표현이 주어졌을 때, 잘려진 쇠막대기 조각의 총 개수를 구하는 프로그램을 작성하시오.

▣ 입력설명
한 줄에 쇠막대기와 레이저의 배치를 나타내는 괄호 표현이 공백없이 주어진다. 괄호 문자의
개수는 최대 100,000이다.

▣ 출력설명
잘려진 조각의 총 개수를 나타내는 정수를 한 줄에 출력한다.

▣ 입력예제 1
()(((()())(())()))(())

▣ 출력예제 1
17

▣ 입력예제 2
(((()(()()))(())()))(()())

▣ 출력예제 2
24
*/

/*
[메모]
1. 여는 괄호를 만나면 stack에 push 한다.

2. 그러다가 닫는 괄호를 만나면... stack에서 하나를 pop 한다.
=> 레이저 포인터이든, 막대기의 종료지점이든 여는 괄호 하나를 빼야하는 상황이 됨.
2-1. 앞에 있던 괄호가 여는 괄호라면?
=> 여는 괄호면 레이저 포인터.
... 레이저 포인터가 나왔으므로 현재까지 잘린 갯수(스택에 누적된 여는 괄호의 갯수)를 카운트에 누적한다.
2.2. 앞에 있던 괄호가 여는 괄호가 아니라면?
=> 하나의 막대기가 끝났음을 의미함.

3. 위 과정을 전체 input 이 끝날 때까지 반복한다.

[잘 이해가 안되는 지점]
1. 어떻게 스택에 남아있는 괄호의 갯수가 잘린 막대기의 갯수가 되는지 정확하게 와닿지 않는다.
2. 막대기의 끝에 다다르면 왜 카운트를 1 추가하는지 잘 와닿지 않는다.
*/

const input = '(((()(()()))(())()))(()())';

// 시도 1 => 코드는 맞는 것 같은데 왜 테스트케이스 2번의 답이 다르게 나오는지 모르겠다;
// else 문의 input[i - 1] 을 input[i - i]로 접근하고 있었음;
function solution1(input) {
  const stack = [];
  let count = 0;
  for (let i = 0; i < input.length; i++) {
    // 현재 i가 여는 괄호인 경우
    if (input[i] === '(') stack.push(input[i]);
    // 현재 i가 닫는 괄호인 경우
    else {
      stack.pop();
      // 직전 괄호가 여는 괄호인 경우 => 레이저포인터
      if (input[i - 1] === '(') count += stack.length;
      // 직전 괄호가 여는 괄호가 아닌 경우 => 막대기의 끝
      else count += 1;
    }
  }
  return count;
}

const result1 = solution1(input);
console.log(result1);
